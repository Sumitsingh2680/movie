<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WATCH MOVIES</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #111;
            color: #fff;
        }

        header {
            text-align: center;
            background-color: #333;
            padding: 10px 0;
            color: #fff;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        header h1 {
            font-size: 1.8rem;
            margin: 0;
            font-weight: bold;
        }

        .chapter-nav {
            display: flex;
            gap: 10px;
            overflow-x: auto;
            background-color: #222;
            padding: 10px;
            position: sticky;
            top: 50px;
            z-index: 10;
        }

        .chapter-nav a {
            color: red;
            text-decoration: none;
            font-size: 1rem;
            padding: 10px 20px;
            border-radius: 5px;
            background: green;
            transition: background-color 0.3s ease;
        }

        .chapter-nav a:hover, .chapter-nav a.active {
            background-color: #555;
        }

        .grid-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .video-card {
            position: relative;
            cursor: pointer;
            overflow: hidden;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
        }

        .video-card img {
            width: 100%;
            height: 180px;
            display: block;
            transition: transform 0.3s ease;
        }

        .video-card:hover img {
            transform: scale(1.1);
        }

        .video-title {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.8);
            padding: 5px;
            text-align: center;
            font-size: 1rem;
            font-weight: bold;
        }

        .search-bar {
            display: flex;
            justify-content: center;
            margin: 20px 0;
        }

        .search-bar input {
            padding: 10px;
            width: 80%;
            max-width: 400px;
            border-radius: 5px;
            background: #222;
            color: #fff;
            border: 1px solid #555;
        }

        .frame-container {
            margin: 20px auto;
            width: 90%;
            max-width: 1200px;
            border: 1px solid #555;
            border-radius: 10px;
            overflow: hidden;
            background: #222;
        }

        .scroll-container {
            display: flex;
            overflow-x: auto;
            padding: 10px;
        }

        .scroll-container::-webkit-scrollbar {
            height: 8px;
        }

        .scroll-container::-webkit-scrollbar-thumb {
            background-color: #555;
            border-radius: 4px;
        }

        .scroll-thumbnail {
            flex: 0 0 auto;
            width: 250px;
            margin: 5px;
            border-radius: 10px;
            cursor: pointer;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
            overflow: hidden;
        }

        .scroll-thumbnail img {
            width: 100%;
            height: 140px;
            display: block;
        }

        .scroll-thumbnail .thumbnail-title {
            background: rgba(0, 0, 0, 0.8);
            padding: 5px;
            text-align: center;
            font-size: 1rem;
            font-weight: bold;
        }

        /* Video Player Overlay Styles */
        .video-player-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.95);
            z-index: 1000;
            display: none;
        }

        .video-player {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 1200px;
            z-index: 1001;
        }

        .video-player video {
            width: 100%;
            height: auto;
            max-height: 85vh;
        }

        .back-btn {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1002;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            font-size: 1rem;
            border-radius: 5px;
        }

        #no-results {
            text-align: center;
            padding: 20px;
            font-size: 1.2rem;
            color: #fff;
        }
    </style>
</head>
<body>
    <!-- Video Player Overlay -->
    <div id="videoPlayerOverlay" class="video-player-overlay">
        <button class="back-btn" onclick="closePlayer()">Back</button>
        <div class="video-player">
            <video id="videoPlayer" controls>
                <source src="" type="video/mp4">
            </video>
        </div>
    </div>

    <!-- Main Content -->
    <header>
        <h1 style="color:red; background:black;"><b>WATCH MOVIES</b></h1>
    </header>

    <div class="search-bar">
        <input type="text" id="searchBox" placeholder="Search for a video..." oninput="searchVideos()">
    </div>
    <div id="no-results" style="display: none;"><b>Movie Not Available</b></div>

    <div class="frame-container">
        <div class="scroll-container" id="thumbnailContainer">
            <!-- Thumbnails will be inserted here by JavaScript -->
        </div>
    </div>

    <div class="chapter-nav">
        <a href="#" class="active" onclick="showChapter('latest')"style="color:red; background:black;"><b>LATEST</b></a>
        <a href="#" onclick="showChapter('bollywood')"style="color:red; background:black;"><b>Bollywood Movies</b></a>
        <a href="#" onclick="showChapter('south')"style="color:red; background:black;"><b>South Movies</b></a>
        <a href="#" onclick="showChapter('hollywood')"style="color:red; background:black;"><b>Hollywood Movies</b></a>
        <a href="#" onclick="showChapter('webseries')"style="color:red; background:black;"><b>Web Series</b></a>
        <a href="#" onclick="showChapter('suggestion')"style="color:red; background:black;"><b>Suggestions</b></a>
    </div>

    <div id="latest" class="grid-container"></div>
    <div id="bollywood" class="grid-container"></div>
    <div id="south" class="grid-container"></div>
    <div id="hollywood" class="grid-container"></div>
    <div id="webseries" class="grid-container"></div>
    <div id="suggestion" class="grid-container">
        <textarea id="userSuggestion" placeholder="Write your suggestion here..." style="width: 100%; height: 100px; background: #333; color: white; border-radius: 10px; border: 1px solid #555;"></textarea>
        <button onclick="submitSuggestion()" style="margin-top: 10px; padding: 10px; background: green; color: white; border-radius: 5px; border: none;"><b>Submit Suggestion</b></button>
    </div>

    <script>
        const chapters = ['latest', 'bollywood', 'south', 'hollywood', 'webseries', 'suggestion'];

        // Fetch the video data from the JSON file
        document.addEventListener("DOMContentLoaded", function() {
            fetch('videos.json')  // Ensure this file is located at the correct path
                .then(response => response.json())
                .then(data => {
                    updateVideos(data);
                })
                .catch(error => console.error("Error fetching video data:", error));
        });

        // Update the video content dynamically based on the JSON data
        function updateVideos(data) {
            chapters.forEach(chapter => {
                const container = document.getElementById(chapter);
                const videos = data[chapter] || [];
                
                // Clear existing content
                container.innerHTML = '';

                videos.forEach((video, index) => {
                    const videoCard = document.createElement('div');
                    videoCard.classList.add('video-card');
                    videoCard.innerHTML = `
                        <img src="${video.image}" alt="${video.title}">
                        <div class="video-title"><b>${video.title}</b></div>
                    `;
                    videoCard.onclick = function() {
                        showVideoPlayer(video.videoUrl);
                    };

                    container.appendChild(videoCard);
                });
            });
        }

        // Show the video player overlay and play the video
        function showVideoPlayer(videoUrl) {
            const overlay = document.getElementById('videoPlayerOverlay');
            const videoPlayer = document.getElementById('videoPlayer');
            
            videoPlayer.src = videoUrl;
            overlay.style.display = 'block';
            videoPlayer.play();
            document.body.style.overflow = 'hidden';  // Disable scroll while video is playing
        }

        // Close the video player
        function closePlayer() {
            const overlay = document.getElementById('videoPlayerOverlay');
            const videoPlayer = document.getElementById('videoPlayer');
            
            videoPlayer.pause();
            videoPlayer.src = '';
            overlay.style.display = 'none';
            document.body.style.overflow = 'auto';  // Re-enable scrolling
        }

        // Switch between chapters (categories)
        function showChapter(chapter) {
            chapters.forEach(ch => {
                const chapterDiv = document.getElementById(ch);
                const link = document.querySelector(`.chapter-nav a[href='#'][onclick="showChapter('${ch}')"]`);
                if (ch === chapter) {
                    chapterDiv.style.display = 'block';
                    link.classList.add('active');
                } else {
                    chapterDiv.style.display = 'none';
                    link.classList.remove('active');
                }
            });
        }

        // Search for videos
        function searchVideos() {
            const query = document.getElementById('searchBox').value.toLowerCase();
            let found = false;

            chapters.forEach(chapter => {
                const container = document.getElementById(chapter);
                const videos = container.getElementsByClassName('video-card');
                
                for (let video of videos) {
                    const title = video.querySelector('.video-title').textContent.toLowerCase();
                    if (title.includes(query)) {
                        video.style.display = 'block';
                        found = true;
                    } else {
                        video.style.display = 'none';
                    }
                }
            });

            document.getElementById('no-results').style.display = found ? 'none' : 'block';
        }

        // Submit a suggestion (for suggestion category)
        function submitSuggestion() {
            const suggestionText = document.getElementById('userSuggestion').value;
            if (suggestionText) {
                alert(`Your suggestion: "${suggestionText}" has been submitted.`);
                document.getElementById('userSuggestion').value = '';
            } else {
                alert('Please write a suggestion before submitting.');
            }
        }
  
  const jsonFileUrl = 'https://raw.githubusercontent.com/your-username/your-repo-name/main/movies.json';

fetch(jsonFileUrl)
    .then(response => response.json())
    .then(data => {
        console.log(data);  // Handle your new video data here
        updateVideoGrid(data);
    })
    .catch(error => {
        console.error('Error fetching the JSON file:', error);
    });

function updateVideoGrid(data) {
    const videosContainer = document.getElementById('video-container');  // Assuming you have this div
    data.videos.forEach(video => {
        const videoCard = document.createElement('div');
        videoCard.classList.add('video-card');
        videoCard.innerHTML = `
            <img src="${video.thumbnail}" alt="${video.title}">
            <div class="video-title">${video.title}</div>
        `;
        videoCard.onclick = function() {
            showVideoPlayer(video.videoUrl);
        };
        videosContainer.appendChild(videoCard);
    });
}

function showVideoPlayer(videoUrl) {
    const overlay = document.getElementById('videoPlayerOverlay');
    const videoPlayer = document.getElementById('videoPlayer');
    videoPlayer.src = videoUrl;
    overlay.style.display = 'block';
    videoPlayer.play();
    document.body.style.overflow = 'hidden';
}

    </script>
</body>
</html>
